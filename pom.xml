<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.openmrs</groupId>
  <artifactId>fhir-warehouse</artifactId>
  <version>1.0-SNAPSHOT</version>

  <name>fhir-warehouse</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
    <slf4j.version>1.7.30</slf4j.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <!-- misc libs -->
    <!-- slf4j dep has conflicts with log4j-slf4j-impl from org.openmrs.api -->
    <!--dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j.version}</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-simple</artifactId>
      <version>${slf4j.version}</version>
    </dependency-->

    <!-- OpenMRS libraries -->
    <!-- prefer to avoid these as they bring a lot more deps!
    for example just to use AtomFeedClientFactory it needs Spring ApplicationContext
    to be set up properly, which we don't right now! -->
    <dependency>
      <groupId>org.openmrs.api</groupId>
      <artifactId>openmrs-api</artifactId>
      <version>2.4.0-SNAPSHOT</version>
      <exclusions>
        <!--exclusion>
          <groupId>org.apache.logging.log4j</groupId>
          <artifactId>log4j-slf4j-impl</artifactId>
        </exclusion-->
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.openmrs.module</groupId>
      <artifactId>atomfeed-api</artifactId>
      <version>1.0.13-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.openmrs.module</groupId>
      <artifactId>atomfeed-api-2.0</artifactId>
      <version>1.0.13-SNAPSHOT</version>
    </dependency>
    <!--
    <dependency>
      <groupId>org.openmrs.module</groupId>
      <artifactId>atomfeed-omod</artifactId>
      <version>1.0.13-SNAPSHOT</version>
    </dependency>
    -->
    <!-- Not sure this is needed but trying to fix an exception in auto-writing:
    AutowiredAnnotationBeanPostProcessor.determineCandidateConstructors
    for atomfeedConfigurationController which is a @Controller.
    Adding this fixed the first exception for the above but then complained
    about java.lang.NoClassDefFoundError: javax/servlet/http/HttpServletRequest
    perhaps because this is not a web-app and we don't want it to be but the
    AtomfeedClient bring all those dependencies!
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
      <version>5.2.6.RELEASE</version>
    </dependency>
    -->
    <!--
    <dependency>
      <groupId>org.ict4h</groupId>
      <artifactId>atomfeed-client</artifactId>
      <version>1.9.4</version>
    </dependency>
    -->

    <!-- This is for com.mysql.jdbc.Driver which is the driver_class property
    set in hibernate.default.properties of openmrs-api. -->
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>5.1.45</version>
      <scope>runtime</scope>
    </dependency>

  </dependencies>

  <build>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
        <!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
        <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>3.7.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>3.0.0</version>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
